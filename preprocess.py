# -*- coding: utf-8 -*-
"""preprocess.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UER4VxPtmu78nTX_Q8gDCiSQel_ep53v
"""

# !pip install konlpy

import os
import re
import json

import numpy as np
import pandas as pd
from tqdm import tqdm

from konlpy.tag import Okt



FILTERS = "([~.,!?\"':;)()])"
PAD = "<PAD>" # 어떤 의미도 없는 패딩 토큰이다.
STD = "<SOS>" # 시작 토큰을 의미
END = "<END>" # 종료 토큰을 의미
UNK = "<UNK>" # 사전에 없는 단어를 의미

PAD_INDEX = 0
STD_INDEX = 1
END_INDEX = 2
UNK_INDEX = 3

MARKER = [PAD, STD, END, UNK]
CHANGE_FILTER = re.compile(FILTERS)

MAX_SEQUENCE = 25




def load_data(path):
    data_df = pd.read_csv(path, header = 0, encoding='utf-8')
    question, answer = list(data_df['Q']), list(data_df['A'])

    return question, answer
	
	
def data_tokenizer(data):
    words = []
    for sentence in data:
        sentence = re.sub(CHANGE_FILTER, "", sentence)
        for word in sentence.split():
            words.append(word)
    return [word for word in words if word]
	
	
def prepro_like_morphlized(data):
    morph_analyzer = Okt()
    result_data = list()
    for seq in tqdm(data):
        morphlized_seq = " ".join(morph_analyzer.morphs(seq.replace(" ","")))
        result_data.append(morphlized_seq)

    return result_data
	
	
def load_vocabulary(path, vocab_path, tokenize_as_morph = False):
    vocabulary_list = []
    if not os.path.exists(vocab_path):
        if (os.path.exists(path)):
            data_df = pd.read_csv(path, encoding='utf-8')
            question, answer = list(data_df['Q']), list(data_df['A'])
            if tokenize_as_morph:
                question = prepro_like_morphlized(question)
                answer = prepro_like_morphlized(answer)

            data = []
            data.extend(question)
            data.extend(answer)
            words = data_tokenizer(data)
            words = list(set(words))
            words[:0] = MARKER

        with open(vocab_path, 'w', encoding = 'utf-8') as vocabulary_file:
            for word in words:
                vocabulary_file.write(word+'\n')

    with open(vocab_path, 'r', encoding='utf-8') as vocabulary_file:
        for line in vocabulary_file:
            vocabulary_list.append(line.strip())
    word2idx, idx2word = make_vocabulary(vocabulary_list)

    return word2idx, idx2word, len(word2idx)
    
	
	
def make_vocabulary(vocabulary_list):
    # 리스트를 가지고 키가 단어이고 값이 인덱스인 딕셔너리를 만든다
    word2idx = {word : idx for idx, word in enumerate(vocabulary_list)}

    # 리스트를 가지고 키가 인덱스이고 값이 단어인 딕셔너리를 만든다
    idx2word = {idx : word for idx, word in enumerate(vocabulary_list)}

    return word2idx, idx2word

# word2idx, idx2word, vocab_size = load_vocabulary(PATH, VOCAB_PATH)



def enc_processing(value, dictionary, tokenize_as_morph=False):
    sequences_input_index = []
    sequences_length = []

    if tokenize_as_morph:
        value = prepro_like_morphlized(value)
        
    for sequence in value:
        sequence = re.sub(CHANGE_FILTER, "", sequence)
        sequence_index = []
        for word in sequence.split():
            if dictionary.get(word) is not None:
                sequence_index.extend([dictionary[word]])
            else:
                sequence_index.extend([dictionary[UNK]])
        
        if len(sequence_index) > MAX_SEQUENCE:
            sequence_index = sequence_index[:MAX_SEQUENCE]

        sequences_length.append(len(sequence_index))
        sequence_index += (MAX_SEQUENCE - len(sequence_index)) * [dictionary[PAD]]

        sequences_input_index.append(sequence_index)

    return np.asarray(sequences_input_index), sequences_length
	
	
	
def dec_output_processing(value, dictionary, tokenize_as_morph = False):
    sequences_output_index = []
    sequences_length = []

    if tokenize_as_morph:
        value = prepro_like_morphlized(value)

    for sequence in value:
        sequence = re.sub(CHANGE_FILTER, "", sequence)
        sequence_index = []
        sequence_index = [dictionary[STD]] + [dictionary[word] if word in dictionary else dictionary[UNK] for word in sequence.split()]

        if len(sequence_index) > MAX_SEQUENCE:
            sequence_index = sequence_index[:MAX_SEQUENCE]
        sequences_length.append(len(sequence_index))
        sequence_index += (MAX_SEQUENCE - len(sequence_index)) * [dictionary[PAD]]

        sequences_output_index.append(sequence_index)

    return np.asarray(sequences_output_index), sequences_length
	
	
	
	
def dec_target_processing(value, dictionary, tokenize_as_morph = False):
    sequences_target_index = []
    if tokenize_as_morph :
        value = prepro_like_morphlized(value)
    for sequence in value:
        sequence = re.sub(CHANGE_FILTER, "", sequence)
        sequence_index = [dictionary[word] if word in dictionary else dictionary[UNK] for word in sequence.split()]
        if len(sequence_index) >= MAX_SEQUENCE:
            sequence_index = sequence_index[:MAX_SEQUENCE - 1] + [dictionary[END]]
        else:
            sequence_index += [dictionary[END]]

        sequence_index += (MAX_SEQUENCE - len(sequence_index)) * [dictionary[PAD]]
        sequences_target_index.append(sequence_index)

    return np.asarray(sequences_target_index)
